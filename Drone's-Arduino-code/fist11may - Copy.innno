// ESc Control and Work
  #include <Servo.h>
  #include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>


  ESP8266WiFiMulti WiFiMulti;
  Servo myservo;  // create servo object to control a servo
  int val;    // variable to read the value from the analog pin
  void setup() {
    Serial.begin(9600); 

    pinMode(D4,OUTPUT);
      myservo.attach(0,1000,2000); 
        myservo.write(0);
        delay(1000);
        myservo.write(10);
          delay(1000);
            myservo.write(30);
            delay(4000);
            myservo.write(00);
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("realme 9 Pro+", "11111111");
  Serial.println("setup() done connecting to ssid");

  }

  void loop() {
  
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {

    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);

   client->setInsecure();

    HTTPClient https;

    Serial.print("[HTTPS] begin...\n");
    if (https.begin(*client, "https://prathameshbhagat.000webhostapp.com/m/m.php")) {  // HTTPS

      Serial.print("[HTTPS] GET...\n");
      // start connection and send HTTP header
      int httpCode = https.GET();

      // httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);

        // file found at server
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = https.getString();
          
          int l =payload.length();
          payload.remove(l-1);
          Serial.println(payload+":");
          int outcome =payload.toInt();
          if(outcome<=30)
          myservo.write(outcome);
        }
      } else {
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }

      https.end();
    } else {
      Serial.printf("[HTTPS] Unable to connect\n");
    }
  }

  Serial.println("Wait 1 before next round...");
  delay(3000);

  }  
